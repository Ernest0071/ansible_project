- import_playbook: fact_gatherer_playbook.yml
  tags:
    - facts

- import_playbook: aws_service_discovery_route53_playbook.yml
  tags:
    - facts

- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - playbook_vars/{{ global_var_environment }}/global_vars.yml
    - playbook_vars/{{ global_var_environment }}/application_kbwebcheckout_vars.yml
    - playbook_vars/{{ global_var_environment }}/vault/{{ global_var_environment }}_variables.vault
  tasks:
    - name: Kowri Business Web Checkout|| Extracting ARN from service discovery
      set_fact:
        reg_kbwebcheckoutserver_sd_dns_details: "{{ ServiceListJson | json_query(\"Services[?Name=='\" + global_var_services_details.kbwebcheckoutserver.name+\"']\") }}"
    - debug: var=reg_kbwebcheckoutserver_sd_dns_details

    - name: Kowri Business Web Checkout|| Creating ECS Cluster
      ecs_cluster:
        name: "{{ global_var_ecs_clustername }}"
        state: present
        region: "{{ global_var_ecs_region }}"
      when: global_var_ecs_clustername is defined 

    - name: Kowri Business Web Checkout||  Creating Parameter Store secrets 
      aws_ssm_parameter_store:
        name: "{{ item.value.id }}"
        decryption: true 
        region: "{{ global_var_ird_region }}"
        string_type: "SecureString"
        value: "{{ item.value.content }}"
        state: "{{ item.value.state | default('present')}}"
        overwrite_value: always # not required. choices: never;changed;always. Option to overwrite an existing value if it already exists.,String
        description: "bb param store"
      with_dict: "{{ kb_webcheckout_server_task_container_secretenv_definition }}"
      no_log: true      

    - name: Kowri Business Web Checkout|| Creating kbwebcheckoutserver task definition
      ecs_taskdefinition:
        state: present 
        family: "{{ kb_webcheckout_server_task_family_name }}"
        region: "{{ global_var_ecs_region }}"
        execution_role_arn: "{{ kb_webcheckout_server_task_executionRoleArn }}"
        task_role_arn: "{{ kb_webcheckout_server_task_executionRoleArn }}"
        network_mode: "{{ kb_webcheckout_server_task_networkmode }}"
        launch_type: "{{ kb_webcheckout_server_task_ecsmode }}"
        cpu: "{{ kb_webcheckout_server_task_cpu }}"
        memory: "{{ kb_webcheckout_server_task_memory }}"
        force_create: "yes"
        containers:
        - name: "{{ global_var_services_details.kbwebcheckoutserver.name }}"
          image: "{{ kb_webcheckout_server_task_container_image }}"
          cpu: "{{ kb_webcheckout_server_task_container_cpu }}"
          memory: "{{ kb_webcheckout_server_task_container_memory }}"
          # memoryReservation: "{{ kb_webcheckout_server_task_container_memoryReservation }}"
          repositoryCredentials:
            credentialsParameter: "{{ kb_webcheckout_server_task_container_credentials_parameter }}"
          portMappings:
          - containerPort: "{{ global_var_services_details.kbwebcheckoutserver.containerPort }}"
            hostPort: "{{ global_var_services_details.kbwebcheckoutserver.hostPort }}"
          essential: "{{ kb_webcheckout_server_task_container_essential }}"
          environment: "{{ kb_webcheckout_server_task_container_env }}"
          secrets: "{{ kb_webcheckout_server_task_container_secretenv }}"
          logConfiguration:
            logDriver: "{{ kb_webcheckout_server_task_container_log_driver }}"
            options:
              awslogs-group: "{{ kb_webcheckout_server_task_container_log_logsgroup }}"
              awslogs-region: "{{ kb_webcheckout_server_task_container_log_logsregion }}" 
              awslogs-stream-prefix: "{{ kb_webcheckout_server_task_container_log_logsprefix }}"

        - name: "{{ global_var_services_details.proxynginxserver.name }}"
          image: "{{global_var_services_details.proxynginxserver.image }}"
          repositoryCredentials:
            credentialsParameter: "{{ kb_webcheckout_server_task_container_credentials_parameter }}"
          portMappings:
          - containerPort: "{{ kb_webcheckout_proxyserver_listen_port }}"
            hostPort: "{{ kb_webcheckout_proxyserver_listen_port }}"
          essential:  "{{ kb_webcheckout_sidecar_server_task_container_essential }}"
          environment: "{{ kb_webcheckoutnginx_server_task_container_env }}"
          logConfiguration:
            logDriver: "{{ kb_webcheckout_server_task_container_log_driver }}"
            options:
              awslogs-group: "{{ kb_webcheckout_server_task_container_log_logsgroup }}"
              awslogs-region: "{{ kb_webcheckout_server_task_container_log_logsregion }}"
              awslogs-stream-prefix: "{{ kb_webcheckout_server_task_container_log_logsprefix }}"

        - name: "{{ global_var_services_details.monitoringserver.name }}"
          image: "{{ global_var_services_details.monitoringserver.image }}"
          essential: false
          secrets: "{{ kb_webcheckout_server_task_container_mon_secretenv }}"
          environment: "{{ kb_webcheckout_server_task_container_mon_env }}"
      register: reg_kb_webcheckout_servertaskdef

    - name: Kowri Business Web Checkout || Obtaining target group facts
      elb_target_group_info:
        names: "{{ kb_webcheckout_server_task_targetgroup_name }}"
        region: "{{ global_var_ecs_region }}"
      register: reg_kb_webcheckout_target_group_facts

    - debug:
        var: reg_kb_webcheckout_target_group_facts

    - name: Kowri Business Web Checkout || Creating Business Web Checkout target group public
      elb_target_group:
        name: "{{ kb_webcheckout_server_task_targetgroup_name }}"
        state: present
        protocol: "{{ kb_webcheckout_server_task_targetgroup_protocol }}"
        successful_response_codes: "{{ kb_webcheckout_server_task_targetgroup_success_http_code }}"
        wait_timeout: 200
        health_check_interval: "{{ kb_webcheckout_server_task_targetgroup_hc_interval }}"
        modify_targets: true
        healthy_threshold_count: "{{ kb_webcheckout_server_task_targetgroup_hc_healthycount }}"
        health_check_path: "{{ kb_webcheckout_server_task_targetgroup_hc_path }}"
        health_check_protocol: "{{ kb_webcheckout_server_task_targetgroup_hc_protocol }}"
        unhealthy_threshold_count: "{{ kb_webcheckout_server_task_targetgroup_hc_unhealthycount }}"
        region: "{{ global_var_ecs_region }}"
        target_type: "{{ kb_webcheckout_server_task_targetgroup_targettype }}"
        port: 80
        vpc_id: "{{ hostvars.localhost.reg_vpc_facts.vpcs.0.id }}"
        # wait: false
        health_check_timeout: "{{ kb_webcheckout_server_task_targetgroup_hc_timeout }}"
      register: reg_kb_webcheckout_targetgroup
      when:
      - reg_kb_webcheckout_target_group_facts | length == 0

    - debug: 
        var: reg_kb_webcheckout_targetgroup

    - name: Kowri Business Web Checkout || Associating target group to a ALB listener for Business Web Checkout
      shell: >
        aws elbv2 create-rule --listener-arn {{ hostvars.localhost.reg_alb_facts.load_balancers.0.listeners.0.listener_arn }}
        --priority {{ global_var_services_details.kbwebcheckoutserver.albPriority }}
        --conditions Field=host-header,Values={{ global_var_services_details.kbwebcheckoutserver.domain }}
        --actions Type=forward,TargetGroupArn={{ reg_kb_webcheckout_target_group_facts.target_groups.0.target_group_arn }}
        --region {{ global_var_ecs_region }}
        --profile {{ lookup('env','AWS_PROFILE') }}
      when:
        - global_awx_ad_hoc_shell_switch is defined
        - not global_awx_ad_hoc_shell_switch

    - name: Kowri Business Web Checkout || Associating target group to a ALB listener for Business Web Checkout with awscli
      shell: >
        aws elbv2 create-rule --listener-arn {{ hostvars.localhost.reg_alb_facts.load_balancers.0.listeners.0.listener_arn }}
        --priority {{ global_var_services_details.kbwebcheckoutserver.albPriority }}
        --conditions Field=host-header,Values={{ global_var_services_details.kbwebcheckoutserver.domain }}
        --actions Type=forward,TargetGroupArn={{ reg_kb_webcheckout_target_group_facts.target_groups.0.target_group_arn }}
        --region {{ global_var_ecs_region }}
      when:
        - global_awx_ad_hoc_shell_switch is defined
        - global_awx_ad_hoc_shell_switch
      environment:
        AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}"



    - name: Kowri Business Web Checkout|| Creating or Updating the ECS service kbwebcheckoutserver
      ecs_service:
        state: present 
        name: "{{ kb_webcheckout_service_name }}"
        service_registries:
          - registryArn: "{{ hostvars.localhost.reg_kbwebcheckoutserver_sd_dns_details.0.Arn }}"
        network_configuration:
            assign_public_ip: no
            security_groups: "{{ hostvars.localhost.reg_app_secgroup_ids_facts | list }}"
            subnets: "{{ hostvars.localhost.reg_private_app_subnet_ids_facts | list }}"
        desired_count: "{{ kb_webcheckout_service_count }}"
        cluster: "{{ global_var_ecs_clustername }}"
        task_definition: "{{ kb_webcheckout_server_task_family_name }}:{{ reg_kb_webcheckout_servertaskdef.taskdefinition.revision }}"
        region: "{{ global_var_ecs_region }}"
        load_balancers:
          - targetGroupArn: "{{ reg_kb_webcheckout_target_group_facts.target_groups.0.target_group_arn }}"
            containerName: "{{ global_var_services_details.proxynginxserver.name }}"
            containerPort: "{{ kb_webcheckout_proxyserver_listen_port }}"
        launch_type: "{{ kb_webcheckout_server_task_ecsmode }}"
        health_check_grace_period_seconds: "{{ kb_webcheckout_service_hc_graceperiod }}"


    - name: Kowri Business Web Checkout|| Creating kb_webcheckout MEM Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ kb_webcheckout_service_mem_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ kb_webcheckout_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ kb_webcheckout_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ kb_webcheckout_service_autoscalling_min_task }}"
        maximum_tasks: "{{ kb_webcheckout_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ kb_webcheckout_service_mem_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ kb_webcheckout_service_mem_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ kb_webcheckout_service_mem_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ kb_webcheckout_service_mem_autoscalling_tracking_scalin_cooldown }}"

    - name: Kowri Business Web Checkout|| Creating kb_webcheckout CPU Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ kb_webcheckout_service_cpu_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ kb_webcheckout_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ kb_webcheckout_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ kb_webcheckout_service_autoscalling_min_task }}"
        maximum_tasks: "{{ kb_webcheckout_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ kb_webcheckout_service_cpu_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ kb_webcheckout_service_cpu_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ kb_webcheckout_service_cpu_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ kb_webcheckout_service_cpu_autoscalling_tracking_scalin_cooldown }}"