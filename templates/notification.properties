
###################################################
#####LNS CONFIG
###################################################
## A unique string that identifies the consumer group this LNS consumer belongs to.
consumer.groupId=${BB_LNS_CONSUMER_GROUP:bblnsconsumergroup1}

#####LNS WORKERS
lns.engine.thread.pool.size=${BB_LNS_THREAD_POOL:8}
lns.engine.thread.wait=${BB_LNS_THREAD_WAIT:500}
lns.engine.thread.workers=${BB_LNS_THREAD_WKR:8}

#######################################################
#### LNS MESSENGER RESENDER(RSND) WORKERS.  ###########
#######################################################
lns.resender.thread.pool.size=${BB_LNS_RSND_THREAD_POOL:3}
lns.resender.thread.wait=${BB_LNS_RSND_THREAD_WAIT:500}
lns.resender.thread.workers=${BB_LNS_RSND_THREAD_WKR:3}
lns.resender.batch.size=${BB_LNS_RSND_BATCH_SIZE:100}
lns.resender.cron:${BB_LNS_RSND_CRON:0 0/30 * * * ?}
lns.resender.boolean.status=${BB_LNS_ENABLE_RSND:false}   
messenger.retry.status.all=${BB_LNS_STATUS_TO_RETRY:FAILED}

#####set this -1 if want this feature off
lns.process.event.date.difference=${BB_LNS_PROCESS_FOR_DATE:1}

#####CACHE CONFIG
customer.cache.ttl.days=${BB_LNS_CUST_CACHE_DAYS:30}
event.cache.ttl.minutes=${BB_LNS_EVENT_CACHE_MIN:18}

###################################################
#####DATABASE
###################################################
######Mongo
datasource.mongodb.uri={cipher}{{ hostvars.localhost.reg_bb_notification_mongo_uri }}
datasource.mongodb.database={cipher}{{ hostvars.localhost.reg_bb_notification_mongo_dbname }}
datasource.mongodb.authenticationdb=${BB_LNS_MONGODB_AUTH:{cipher}{{ hostvars.localhost.reg_bb_notification_mongo_dbname }}}

spring.data.mongodb.uri={cipher}{{ hostvars.localhost.reg_bb_notification_mongo_uri }}
spring.data.mongodb.database={cipher}{{ hostvars.localhost.reg_bb_notification_mongo_dbname }}

#####REDIS
spring.redis.host=${BB_LNS_REDIS_HOST:{{ hostvars.localhost.reg_elasticache_facts }}}
spring.redis.password=${BB_LNS_REDIS_PWD:}
spring.redis.port=${BB_LNS_REDIS_PORT:{{ global_var_redis_port }}}

####################################
######      KAFKA   ################
####################################
kafka.topic=${BB_LNS_KAFKA_TOPIC:notification_event_stream}
###kafka bootstrap servers:
bootstrap.servers={{ bb_lns_kafka_bootstrap }}
offset.reset.config=${BB_LNS_OFFSET_RESET:latest}
##### NB
##### earliest: automatically reset the offset to the earliest offset
##### latest: automatically reset the offset to the latest offset

##### INTERNAL CACHE
use.internal.cache.of.size=${BB_LNS_USE_INTERNAL_CACHE:-1}

###################################################
##### APIs FOR MESSENGER AND TEMPLATE ENGINE
###################################################
send.message.url=http://{{ bb_lns_configmap_namespace_and_port_for_messenger }}/admin/messenger/send
generate.template.url=http://{{ bb_lns_configmap_namespace_and_port_for_templateengine }}/template/generate

##################################################################
##### DISABLE EUREKA CONFIG
##################################################################
spring.cloud.discovery.enabled=${BB_LNS_ENABLE_DISCOVERY:false}
spring.cloud.service-registry.auto-registration.enabled=${BB_LNS_ENABLE_REGISTRY:false}
eureka.client.enabled=${BB_LNS_ENABLE_EUREKA:false}
eureka.client.serviceUrl.registerWithEureka=${BB_LNS_REGISTER_EUREKA:false}
