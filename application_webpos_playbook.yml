- import_playbook: fact_gatherer_playbook.yml
  tags:
    - facts

- import_playbook: aws_service_discovery_route53_playbook.yml
  tags:
    - facts

- hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - playbook_vars/{{ global_var_environment }}/global_vars.yml
    - playbook_vars/{{ global_var_environment }}/application_webpos_vars.yml
    - playbook_vars/{{ global_var_environment }}/vault/{{ global_var_environment }}_variables.vault
  tasks:

    - name: Billbox WebPOS ||  Creating ECS Cluster
      ecs_cluster:
        name: "{{ global_var_ecs_clustername }}"
        state: present
        region: "{{ global_var_ecs_region }}"
      when: global_var_ecs_clustername is defined

    - name: Billbox WebPOS ||  Creating Parameter Store secrets
      aws_ssm_parameter_store:
        name: "{{ item.value.id }}"
        decryption: true
        region: "{{ global_var_ird_region }}"
        string_type: "SecureString"
        value: "{{ item.value.content }}"
        state: "{{ item.value.state | default('present') }}"
        overwrite_value: always # not required. choices: never;changed;always. Option to overwrite an existing value if it already exists.,String
        description: "bb param store"
      with_dict: "{{ bb_webpos_server_task_container_secretenv_definition }}"
      no_log: true

    - name: Billbox WebPOS || Creating webposServer task definition
      ecs_taskdefinition:
        state: present
        family: "{{ bb_webpos_server_task_family_name }}"
        region: "{{ global_var_ecs_region }}"
        execution_role_arn: "{{ bb_webpos_server_task_executionRoleArn }}"
        network_mode: "{{ bb_webpos_server_task_networkmode }}"
        launch_type: "{{ bb_webpos_server_task_ecsmode }}"
        cpu: "{{ bb_webpos_server_task_cpu }}"
        memory: "{{ bb_webpos_server_task_memory }}"
        force_create: true
        containers:
        - name: "{{ global_var_services_details.webposserver.name }}"
          image: "{{ bb_webpos_server_task_container_image }}"
          cpu: "{{ bb_webpos_server_task_container_cpu }}"
          memory: "{{ bb_webpos_server_task_container_memory }}"
          # memoryReservation: "{{ bb_webpos_server_task_container_memoryReservation }}"
          repositoryCredentials:
            credentialsParameter: "{{ bb_webpos_server_task_container_credentials_parameter }}"
          portMappings:
          - containerPort: "{{ global_var_services_details.webposserver.containerPort }}"
            hostPort: "{{ global_var_services_details.webposserver.hostPort }}"
          essential: "{{ bb_webpos_server_task_container_essential }}"
          environment: "{{ bb_webpos_server_task_container_env }}"
          secrets: "{{ bb_webpos_server_task_container_secretenv }}"
          # healthCheck:
          #   command:
          #     - "CMD-SHELL"
          #     - "curl -f http://localhost:{{ global_var_services_details.webposserver.containerPort }}/ || exit 1"
          #   interval: 6
          #   retries: 3
          #   startPeriod: 200
          #   timeout: 5
          logConfiguration:
            logDriver: "{{ bb_webpos_server_task_container_log_driver }}"
            options:
              awslogs-group: "{{ bb_webpos_server_task_container_log_logsgroup }}"
              awslogs-region: "{{ bb_webpos_server_task_container_log_logsregion }}" 
              awslogs-stream-prefix: "{{ bb_webpos_server_task_container_log_logsprefix }}"

        - name: "{{ global_var_services_details.corenginxserver.name }}"
          image: "{{ global_var_services_details.corenginxserver.image }}"
          repositoryCredentials:
            credentialsParameter: "{{ bb_webpos_server_task_container_credentials_parameter }}"
          portMappings:
          - containerPort: "{{ global_var_services_details.corenginxserver.containerPort }}"
            hostPort: "{{ global_var_services_details.corenginxserver.hostPort }}"
          essential: "{{ bb_webpos_sidecar_server_task_container_essential }}"
          environment: "{{ bb_webposnginx_server_task_container_env }}"
          logConfiguration:
            logDriver: "{{ bb_webpos_server_task_container_log_driver }}"
            options:
              awslogs-group: "{{ bb_webpos_server_task_container_log_logsgroup }}"
              awslogs-region: "{{ bb_webpos_server_task_container_log_logsregion }}" 
              awslogs-stream-prefix: "{{ bb_webpos_server_task_container_log_logsprefix }}"

        - name: "{{ bb_webpos_service_monitoringserver_name }}"
          image: "{{ bb_webpos_service_monitoringserver_image }}"
          essential: false
          secrets: "{{ bb_webpos_server_task_container_mon_secretenv }}"
          environment: "{{ bb_webpos_server_task_container_mon_env }}"
      register: reg_webpos_servertaskdef

    # - debug: var=reg_webpos_servertaskdef

    - name: Billbox WebPos || Obtaining target group facts
      elb_target_group_info:
        names: "{{ bb_webpos_targetgroup_name }}"
        region: "{{ global_var_ecs_region }}"
      register: reg_bb_webpos_target_group_facts

    - name: Billbox WebPOS || Creating webpos target group
      elb_target_group:
        name: "{{ bb_webpos_targetgroup_name }}"
        state: present 
        protocol: "{{ bb_webpos_targetgroup_protocol }}"
        successful_response_codes: "{{ bb_webpos_targetgroup_success_http_code }}"
        wait_timeout: 200 
        health_check_interval: "{{ bb_webpos_targetgroup_hc_interval }}"
        modify_targets: true 
        healthy_threshold_count: "{{ bb_webpos_targetgroup_hc_healthycount }}"
        health_check_path: "{{ bb_webpos_targetgroup_hc_path }}"
        health_check_protocol: "{{ bb_webpos_targetgroup_hc_protocol }}" 
        unhealthy_threshold_count: "{{ bb_webpos_targetgroup_hc_unhealthycount }}"
        region: "{{ global_var_ecs_region }}"
        target_type: "{{ bb_webpos_targetgroup_targettype }}"
        port: 80
        vpc_id: "{{ hostvars.localhost.reg_vpc_facts.vpcs.0.id }}" 
        # wait: false 
        health_check_timeout: "{{ bb_webpos_targetgroup_hc_timeout }}"
      register: reg_webpos_targetgroup
      when:
        - reg_bb_webpos_target_group_facts | length == 0

    - name: Billbox WebPOS || Associating target group to a ALB listener for webpos
      shell: >
          aws elbv2 create-rule --listener-arn {{ hostvars.localhost.reg_alb_facts.load_balancers.0.listeners.0.listener_arn }}
          --priority {{ global_var_services_details.webposserver.albPriority }}
          --conditions Field=host-header,Values={{ global_var_services_details.webposserver.domain }}
          --actions Type=forward,TargetGroupArn={{ reg_bb_webpos_target_group_facts.target_groups.0.target_group_arn }}
          --region {{ global_var_ecs_region }}
          --profile {{ lookup('env','AWS_PROFILE') }}
      when:
        - global_awx_ad_hoc_shell_switch is defined
        - not global_awx_ad_hoc_shell_switch

    - name: Billbox WebPOS || Associating target group to a ALB listener for webpos with awscli
      shell: >
          aws elbv2 create-rule --listener-arn {{ hostvars.localhost.reg_alb_facts.load_balancers.0.listeners.0.listener_arn }}
          --priority {{ global_var_services_details.webposserver.albPriority }}
          --conditions Field=host-header,Values={{ global_var_services_details.webposserver.domain }}
          --actions Type=forward,TargetGroupArn={{ reg_bb_webpos_target_group_facts.target_groups.0.target_group_arn }}
          --region {{ global_var_ecs_region }}
      when:
        - global_awx_ad_hoc_shell_switch is defined
        - global_awx_ad_hoc_shell_switch
      environment:
        AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}"

    - name: Billbox WebPOS || Creating or Updating the ECS service webposserver
      ecs_service:
        state: present
        name: "{{ bb_webpos_service_name }}"
        # service_registries:
        #   - registryArn: "{{ hostvars.localhost.reg_webpos_sd_dns_details.0.Arn }}"
        network_configuration:
            assign_public_ip: false
            security_groups: "{{ hostvars.localhost.reg_app_secgroup_ids_facts | list }}"
            subnets: "{{ hostvars.localhost.reg_private_app_subnet_ids_facts | list }}"
        desired_count: "{{ bb_webpos_service_count }}"
        cluster: "{{ global_var_ecs_clustername }}"
        task_definition: "{{ bb_webpos_server_task_family_name }}:{{ reg_webpos_servertaskdef.taskdefinition.revision }}"
        region: "{{ global_var_ecs_region }}"
        load_balancers:
          - targetGroupArn: "{{ reg_bb_webpos_target_group_facts.target_groups.0.target_group_arn }}"
            containerName: "{{ global_var_services_details.corenginxserver.name }}"
            containerPort: "{{ global_var_services_details.corenginxserver.containerPort }}"
        launch_type: "{{ bb_webpos_server_task_ecsmode }}"
        health_check_grace_period_seconds: "{{ bb_webpos_service_hc_graceperiod }}"

    - name: Billbox WebPOS || Creating webpos MEM Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ bb_webpos_service_mem_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ bb_webpos_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ bb_webpos_service_autoscalling_min_task }}"
        maximum_tasks: "{{ bb_webpos_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ bb_webpos_service_mem_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ bb_webpos_service_mem_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ bb_webpos_service_mem_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ bb_webpos_service_mem_autoscalling_tracking_scalin_cooldown }}"

    - name: Billbox WebPOS || Creating webpos CPU Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ bb_webpos_service_cpu_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ bb_webpos_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ bb_webpos_service_autoscalling_min_task }}"
        maximum_tasks: "{{ bb_webpos_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ bb_webpos_service_cpu_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ bb_webpos_service_cpu_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ bb_webpos_service_cpu_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ bb_webpos_service_cpu_autoscalling_tracking_scalin_cooldown }}"


    # - name: Billbox WebPOS || Creating a Sleep Time scheduled application autoscalling for Billbox WebPOS
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_webpos_service_name }}-off-time
    #       --schedule "cron({{ bb_webpos_service_sleep_cron | default('00 20 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_webpos_service_scheduled_sleep_autoscalling_min_task | default(0) }},MaxCapacity={{ bb_webpos_service_scheduled_sleep_autoscalling_max_task | default(0) }}
    #       --profile {{ lookup('env','AWS_PROFILE') }}
    #       --region {{ global_var_ecs_region }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - not global_awx_ad_hoc_shell_switch
    #     - bb_webpos_service_scheduled_autoscalling | default(false)    

    # - name: Billbox WebPOS Server || Creating a Sleep Time scheduled application autoscalling for Billbox WebPOS with awscli
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_webpos_service_name }}-off-time
    #       --schedule "cron({{ bb_webpos_service_sleep_cron | default('00 20 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_webpos_service_scheduled_sleep_autoscalling_min_task | default(0) }},MaxCapacity={{ bb_webpos_service_scheduled_sleep_autoscalling_max_task | default(0) }}
    #       --region {{ global_var_ecs_region }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - global_awx_ad_hoc_shell_switch
    #     - bb_webpos_service_scheduled_autoscalling | default(false)
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
    #     AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}" 

    # - name: Billbox WebPOS || Creating a Wake Time scheduled application autoscalling for Billbox WebPOS
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_webpos_service_name }}-wake-time
    #       --schedule "cron({{ bb_webpos_service_wake_cron | default('00 08 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_webpos_service_scheduled_wake_autoscalling_min_task | default(1) }},MaxCapacity={{ bb_webpos_service_scheduled_wake_autoscalling_max_task | default(1) }}
    #       --region {{ global_var_ecs_region }}
    #       --profile {{ lookup('env','AWS_PROFILE') }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - not global_awx_ad_hoc_shell_switch
    #     - bb_webpos_service_scheduled_autoscalling | default(false)    

    # - name: Billbox WebPOS Server || Creating a Wake Time scheduled application autoscalling for Billbox WebPOS with awscli
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_webpos_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_webpos_service_name }}-wake-time
    #       --schedule "cron({{ bb_webpos_service_wake_cron | default('00 08 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_webpos_service_scheduled_wake_autoscalling_min_task | default(1) }},MaxCapacity={{ bb_webpos_service_scheduled_wake_autoscalling_max_task | default(1) }}
    #       --region {{ global_var_ecs_region }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - global_awx_ad_hoc_shell_switch
    #     - bb_webpos_service_scheduled_autoscalling | default(false)
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
    #     AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}" 
