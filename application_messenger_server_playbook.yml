- import_playbook: fact_gatherer_playbook.yml
  tags:
    - facts

- import_playbook: aws_service_discovery_route53_playbook.yml
  tags:
    - facts    

- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - playbook_vars/{{ global_var_environment }}/global_vars.yml
    - playbook_vars/{{ global_var_environment }}/application_messenger_vars.yml
    - playbook_vars/{{ global_var_environment }}/vault/{{ global_var_environment }}_variables.vault
  tasks:
    - name: Extracting ARN from service discovery
      set_fact:
        reg_messengerserver_sd_dns_details: "{{ ServiceListJson | json_query(\"Services[?Name=='\" + global_var_services_details.messengerserver.name+\"']\") }}"

    - name: Billbox Messenger || Creating ECS Cluster
      ecs_cluster:
        name: "{{ global_var_ecs_clustername }}"
        state: present
        region: "{{ global_var_ecs_region }}"
      when: global_var_ecs_clustername is defined 

    - name: Billbox Messenger || Clearing Checking Folder
      file:
          path: "{{ global_var_configuration_git_dir }}"
          state: absent
      ignore_errors: true

    - name: Billbox Messenger || Creating billbox configuration git directory
      file:
        path: "{{ item.path }}" 
        recurse: yes 
        state: directory
        # owner: "{{ ansible_user }}"
        mode: "{{ item.mode | default('0755') }}" 
      when: global_var_configuration_git_create_folders_details is defined
      with_items: "{{ global_var_configuration_git_create_folders_details | default({}) }}"
      

    - name: Billbox Messenger || Checking out the properties files
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dir }}"
        version: "{{ item.version }}"
        force: yes
      when: global_var_configuration_git_details is defined
      with_items: "{{ global_var_configuration_git_details }}"


    - name: Billbox Messenger || Encryption messenger Mongo URI
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt 'mongodb://{{ vault_mongo_messenger_username }}:{{ vault_mongo_messenger_password }}@{{ hostvars.localhost.reg_mongo_cluster_uri }}/{{ vault_mongo_messenger_dbname }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_bb_messenger_mongo_uri
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"      

    - name: Billbox Messenger || Encryption messenger Mongo DBname
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt '{{ vault_mongo_messenger_dbname }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_bb_messenger_mongo_dbname
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"  

    - name: Billbox Messenger || Encryption messenger Mongo username
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt '{{ vault_mongo_messenger_username }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_bb_messenger_mongo_username
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"  

    - name: Billbox Messenger || Encryption messenger Mongo password
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt '{{ vault_mongo_messenger_password }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_bb_messenger_mongo_password
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"  

    - name: Billbox Messenger || Encryption messenger SMTP auth username
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt '{{ vault_qikli_mail_username }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_messenger_mail_username
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"  

    - name: Billbox Messenger || Encryption messenger SMTP auth password
      shell: "{{ spring_cloud_cli_path | default('') }}spring encrypt '{{ vault_qikli_mail_password }}' --key {{ vault_configserver_encryption_key }}"
      register: reg_messenger_mail_password
      environment:
        JAVA_HOME: "{{ java_home_path | default(lookup('env', 'JAVA_HOME')) }}"  

    - name: Billbox Messenger || Setting Encrypted scheduler credential facts
      set_fact:
        reg_bb_messenger_mongo_uri: "{{ reg_bb_messenger_mongo_uri.stdout }}"
        reg_bb_messenger_mongo_dbname: "{{ reg_bb_messenger_mongo_dbname.stdout }}"
        reg_bb_messenger_mongo_password: "{{ reg_bb_messenger_mongo_password.stdout }}"
        reg_bb_messenger_mongo_username: "{{ reg_bb_messenger_mongo_username.stdout }}"
        reg_messenger_mail_username: "{{ reg_messenger_mail_username.stdout }}"
        reg_messenger_mail_password: "{{ reg_messenger_mail_password.stdout }}"

    - name: Billbox Messenger || Creating scheduler config file
      template: 
        dest: "{{ global_var_configuration_git_dir }}/{{global_var_configserver_folder}}/{{ global_var_services_details.messengerserver.config_name }}-{{ global_var_environment }}.properties"
        src: "templates/{{ global_var_services_details.messengerserver.config_name }}.properties" 

    - name: Billbox Messenger ||  Creating Parameter Store secrets 
      aws_ssm_parameter_store:
        name: "{{ item.value.id }}"
        decryption: true 
        region: "{{ global_var_ird_region }}"
        string_type: "SecureString"
        value: "{{ item.value.content }}"
        state: "{{ item.value.state | default('present')}}"
        overwrite_value: always # not required. choices: never;changed;always. Option to overwrite an existing value if it already exists.,String
        description: "bb param store"
      with_dict: "{{ bb_messenger_server_task_container_secretenv_definition }}"
      no_log: true      

    - name: Billbox Messenger || Creating messengerServer task definition
      ecs_taskdefinition:
        state: present 
        family: "{{ bb_messenger_server_task_family_name }}"
        region: "{{ global_var_ecs_region }}"
        execution_role_arn: "{{ bb_messenger_server_task_executionRoleArn }}" 
        network_mode: "{{ bb_messenger_server_task_networkmode }}"
        launch_type: "{{ bb_messenger_server_task_ecsmode }}"
        cpu: "{{ bb_messenger_server_task_cpu }}"
        memory: "{{ bb_messenger_server_task_memory }}"
        force_create: yes         
        containers: 
        - name: "{{ global_var_services_details.messengerserver.name }}"
          image: "{{ bb_messenger_server_task_container_image }}"
          cpu: "{{ bb_messenger_server_task_container_cpu }}"
          memory: "{{ bb_messenger_server_task_container_memory }}"
          # memoryReservation: "{{ bb_messenger_server_task_container_memoryReservation }}"
          repositoryCredentials:
            credentialsParameter: "{{ bb_messenger_server_task_container_credentials_parameter }}"
          portMappings:
          - containerPort: "{{ global_var_services_details.messengerserver.containerPort }}"
            hostPort: "{{ global_var_services_details.messengerserver.hostPort }}"
          essential: "{{ bb_messenger_server_task_container_essential }}"
          environment: "{{ bb_messenger_server_task_container_env }}"
          # secrets: "{{ bb_messenger_server_task_container_secretenv }}"
          logConfiguration:
            logDriver: "{{ bb_messenger_server_task_container_log_driver }}"
            options:
              awslogs-group: "{{ bb_messenger_server_task_container_log_logsgroup }}"
              awslogs-region: "{{ bb_messenger_server_task_container_log_logsregion }}" 
              awslogs-stream-prefix: "{{ bb_messenger_server_task_container_log_logsprefix }}"

        - name: "{{ global_var_services_details.monitoringserver.name }}"
          image: "{{ global_var_services_details.monitoringserver.image }}"
          essential: false
          secrets: "{{ bb_messenger_server_task_container_mon_secretenv }}"
          environment: "{{ bb_messenger_server_task_container_mon_env }}"
      register: reg_messenger_servertaskdef 

    - name: Billbox Messenger || Staging git changes
      shell: >
          git add *
      args:
        chdir: "{{ global_var_configuration_git_dir }}"
      ignore_errors: true


    - name: Billbox Messenger || Committing git repository
      shell: >
          git commit 
          -m 'committing new tasks {{ global_var_services_details.messengerserver.name }}
          and cardhandler specific variable concens'
      args:
        chdir: "{{ global_var_configuration_git_dir }}"
      ignore_errors: true

    - name: Billbox Messenger || Pushing cardhandler changes to remote
      shell: >
          git push
      args:
        chdir: "{{ global_var_configuration_git_dir }}"
      ignore_errors: true

    - name: Billbox Messenger || Creating or Updating the ECS service messengerserver
      ecs_service:
        state: present 
        name: "{{ bb_messenger_service_name }}"
        service_registries:
          - registryArn: "{{ hostvars.localhost.reg_messengerserver_sd_dns_details.0.Arn }}"
        network_configuration:
            assign_public_ip: no
            security_groups: "{{ hostvars.localhost.reg_app_secgroup_ids_facts | list }}"
            subnets: "{{ hostvars.localhost.reg_private_app_subnet_ids_facts | list }}"
        desired_count: "{{ bb_messenger_service_count }}"
        cluster: "{{ global_var_ecs_clustername }}"
        task_definition: "{{ bb_messenger_server_task_family_name }}:{{ reg_messenger_servertaskdef.taskdefinition.revision }}"
        region: "{{ global_var_ecs_region }}"
        launch_type: "{{ bb_messenger_server_task_ecsmode }}"

    - name: Billbox Messenger || Creating scheduler MEM Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ bb_messenger_service_mem_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ bb_messenger_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ bb_messenger_service_autoscalling_min_task }}"
        maximum_tasks: "{{ bb_messenger_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ bb_messenger_service_mem_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ bb_messenger_service_mem_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ bb_messenger_service_mem_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ bb_messenger_service_mem_autoscalling_tracking_scalin_cooldown }}"

    - name: Billbox Messenger || Creating scheduler CPU Scalling Policy for {{ global_var_environment }}
      aws_application_scaling_policy:
        state: present
        policy_name: "{{ bb_messenger_service_cpu_autoscalling_policy_name }}"
        service_namespace: ecs
        region: "{{ global_var_ecs_region }}"
        resource_id: service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
        scalable_dimension: ecs:service:DesiredCount
        policy_type: "{{ bb_messenger_service_autoscalling_policy_type }}"
        minimum_tasks: "{{ bb_messenger_service_autoscalling_min_task }}"
        maximum_tasks: "{{ bb_messenger_service_autoscalling_max_task }}"
        target_tracking_scaling_policy_configuration:
          TargetValue: "{{ bb_messenger_service_cpu_autoscalling_tracking_scaling_target_value }}"
          PredefinedMetricSpecification:
            PredefinedMetricType: "{{ bb_messenger_service_cpu_autoscalling_tracking_scaling_metric_spec }}"
          ScaleOutCooldown: "{{ bb_messenger_service_cpu_autoscalling_tracking_scalout_cooldown }}"
          ScaleInCooldown: "{{ bb_messenger_service_cpu_autoscalling_tracking_scalin_cooldown }}"


    # - name: Billbox Messenger || Creating a Sleep Time scheduled application autoscalling for Billbox Messenger
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_messenger_service_name }}-off-time
    #       --schedule "cron({{ bb_messenger_service_sleep_cron | default('00 20 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_messenger_service_scheduled_sleep_autoscalling_min_task | default(0) }},MaxCapacity={{ bb_messenger_service_scheduled_sleep_autoscalling_max_task | default(0) }}
    #       --region {{ global_var_ecs_region }}
    #       --profile {{ lookup('env','AWS_PROFILE') }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - not global_awx_ad_hoc_shell_switch
    #     - bb_messenger_service_scheduled_autoscalling | default(false)    

    # - name: Billbox Messenger Server || Creating a Sleep Time scheduled application autoscalling for Billbox Messenger with awscli
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_messenger_service_name }}-off-time
    #       --schedule "cron({{ bb_messenger_service_sleep_cron | default('00 20 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_messenger_service_scheduled_sleep_autoscalling_min_task | default(0) }},MaxCapacity={{ bb_messenger_service_scheduled_sleep_autoscalling_max_task | default(0) }}
    #       --region {{ global_var_ecs_region }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - global_awx_ad_hoc_shell_switch
    #     - bb_messenger_service_scheduled_autoscalling | default(false)
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
    #     AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}" 

    # - name: Billbox Messenger || Creating a Wake Time scheduled application autoscalling for Billbox Messenger
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_messenger_service_name }}-wake-time
    #       --schedule "cron({{ bb_messenger_service_wake_cron | default('00 08 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_messenger_service_scheduled_wake_autoscalling_min_task | default(1) }},MaxCapacity={{ bb_messenger_service_scheduled_wake_autoscalling_max_task | default(1) }}
    #       --region {{ global_var_ecs_region }}
    #       --profile {{ lookup('env','AWS_PROFILE') }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - not global_awx_ad_hoc_shell_switch
    #     - bb_messenger_service_scheduled_autoscalling | default(false)    

    # - name: Billbox Messenger Server || Creating a Wake Time scheduled application autoscalling for Billbox Messenger with awscli
    #   shell: > 
    #       aws application-autoscaling put-scheduled-action --service-namespace ecs
    #       --scalable-dimension ecs:service:DesiredCount
    #       --resource-id service/{{ global_var_ecs_clustername }}/{{ bb_messenger_service_name }}
    #       --scheduled-action-name scheduled-gh-office-{{ bb_messenger_service_name }}-wake-time
    #       --schedule "cron({{ bb_messenger_service_wake_cron | default('00 08 ? * MON-FRI *') }})"
    #       --scalable-target-action MinCapacity={{ bb_messenger_service_scheduled_wake_autoscalling_min_task | default(1) }},MaxCapacity={{ bb_messenger_service_scheduled_wake_autoscalling_max_task | default(1) }}
    #       --region {{ global_var_ecs_region }}
    #   when:
    #     - global_awx_ad_hoc_shell_switch is defined
    #     - global_awx_ad_hoc_shell_switch
    #     - bb_messenger_service_scheduled_autoscalling | default(false)
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key }}"
        # AWS_SECRET_ACCESS_KEY: "{{ vault_aws_access_secret }}" 
